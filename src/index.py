import os
import yfinance as yf
import json
from datetime import datetime

# List of stock symbols

nepse_symbols = [
    "ACLBSL",
    "ADBL",
    "AHL",
    "AHPC",
    "AIL",
    "AKBSL",
    "AKJCL",
    "AKPL",
    "ALBSL",
    "ALICL",
    "ANLB",
    "API",
    "AVYAN",
    "BARUN",
    "BBC",
    "BFC",
    "BGWT",
    "BHDC",
    "BHL",
    "BHPL",
    "BNHC",
    "BNL",
    "BNT",
    "BOKL",
    "BPW",
    "CBBL",
    "CBL",
    "CCBL",
    "CFCL",
    "CHDC",
    "CHL",
    "CIT",
    "CITY",
    "CKHL",
    "CLI",
    "CORBL",
    "CYCL",
    "CZBIL",
    "DDBL",
    "DHPL",
    "DLBS",
    "DOLTI",
    "DORDI",
    "EBL",
    "EDBL",
    "EHPL",
    "EIC",
    "ENL",
    "FMDBL",
    "FOWAD",
    "GBBL",
    "GBIME",
    "GBLBS",
    "GCIL",
    "GFCL",
    "GHL",
    "GIC",
    "GILB",
    "GLBSL",
    "GLH",
    "GLICL",
    "GMFBS",
    "GMFIL",
    "GRDBL",
    "GUFL",
    "GVL",
    "HATHY",
    "HBL",
    "HDHPC",
    "HDL",
    "HEI",
    "HGI",
    "HHL",
    "HIDCL",
    "HLBSL",
    "HLI",
    "HPPL",
    "HRL",
    "HURJA",
    "ICFC",
    "IGI",
    "IHL",
    "ILBS",
    "ILI",
    "JALPA",
    "JBBL",
    "JBLB",
    "JFL",
    "JLI",
    "JSLBB",
    "KBL",
    "KBSH",
    "KDBY",
    "KDL",
    "KEF",
    "KKHC",
    "KLBSL",
    "KMCDB",
    "KPCL",
    "KRBL",
    "KSBBL",
    "LBBL",
    "LBL",
    "LEC",
    "LGIL",
    "LICN",
    "LLBS",
    "LSL",
    "LUK",
    "MAKAR",
    "MANDU",
    "MBJC",
    "MBL",
    "MCHL",
    "MDB",
    "MEGA",
    "MEHL",
    "MEL",
    "MEN",
    "MERO",
    "MFIL",
    "MHCL",
    "MHL",
    "MHNL",
    "MKCL",
    "MKHC",
    "MKHL",
    "MKJC",
    "MKLB",
    "MLBL",
    "MLBS",
    "MLBSL",
    "MMKJL",
    "MNBBL",
    "MPFL",
    "MSHL",
    "MSLB",
    "NABBC",
    "NABIL",
    "NADEP",
    "NBB",
    "NBL",
    "NCCB",
    "NESDO",
    "NFS",
    "NGPL",
    "NHDL",
    "NHPC",
    "NIB",
    "NICA",
    "NICL",
    "NICLBSL",
    "NIFRA",
    "NIL",
    "NIMB",
    "NLBBL",
    "NLG",
    "NLIC",
    "NLICL",
    "NMB",
    "NMBMF",
    "NMFBS",
    "NRIC",
    "NRM",
    "NRN",
    "NSLB",
    "NTC",
    "NUBL",
    "NWCL",
    "NYADI",
    "OHL",
    "PCBL",
    "PFL",
    "PHCL",
    "PIC",
    "PICL",
    "PLIC",
    "PMHPL",
    "PMLI",
    "PPL",
    "PRIN",
    "PROFL",
    "PRVU",
    "RADHI",
    "RAWA",
    "RBCL",
    "RFPL",
    "RHGCL",
    "RHPL",
    "RIDI",
    "RLFL",
    "RLI",
    "RMDC",
    "RNLI",
    "RRHP",
    "RULB",
    "RURU",
    "SABSL",
    "SADBL",
    "SAGF",
    "SAHAS",
    "SALICO",
    "SAMAJ",
    "SANIMA",
    "SAPDBL",
    "SARBTM",
    "SBCF",
    "SBI",
    "SBL",
    "SCB",
    "SDLBSL",
    "SFCL",
    "SFMF",
    "SGHC",
    "SGI",
    "SGIC",
    "SHEL",
    "SHINE",
    "SHIVM",
    "SHL",
    "SHLB",
    "SHPC",
    "SIC",
    "SICL",
    "SIFC",
    "SIKLES",
    "SIL",
    "SINDU",
    "SJCL",
    "SJLIC",
    "SKBBL",
    "SLBBL",
    "SLBSL",
    "SLCF",
    "SLI",
    "SLICL",
    "SLK",
    "SMATA",
    "SMB",
    "SMFBS",
    "SMFDB",
    "SMH",
    "SMHL",
    "SMJC",
    "SNLI",
    "SONA",
    "SPC",
    "SPDL",
    "SPHL",
    "SPL",
    "SRBL",
    "SRLI",
    "SSHL",
    "SSIS",
    "STC",
    "SWBBL",
    "SWMF",
    "TAMOR",
    "TPC",
    "TSHL",
    "TVCL",
    "UAIL",
    "UHEWA",
    "UIC",
    "ULBSL",
    "ULHC",
    "ULI",
    "UMHL",
    "UMRH",
    "UNHPL",
    "UNL",
    "UNLB",
    "UPCL",
    "UPPER",
    "USHEC",
    "USHL",
    "USLB",
    "VLBS",
    "VLUCL",
    "WNLB",
]

snp_500_symbols = [
    "AAPL",
    "MSFT",
    "NVDA",
    "GOOGL",
    "GOOG",
    "AMZN",
    "META",
    "LLY",
    "AVGO",
    "TSLA",
    "JPM",
    "WMT",
    "XOM",
    "UNH",
    "V",
    "MA",
    "PG",
    "JNJ",
    "ORCL",
    "COST",
    "HD",
    "ABBV",
    "BAC",
    "MRK",
    "CVX",
    "KO",
    "NFLX",
    "CRM",
    "ADBE",
    "PEP",
    "TMO",
    "AMD",
    "LIN",
    "WFC",
    "ACN",
    "TMUS",
    "QCOM",
    "DHR",
    "CSCO",
    "TXN",
    "GE",
    "ABT",
    "MCD",
    "AMGN",
    "INTU",
    "PM",
    "IBM",
    "AXP",
    "PFE",
    "BX",
    "CAT",
    "AMAT",
    "NOW",
    "MS",
    "VZ",
    "DIS",
    "GS",
    "ISRG",
    "CMCSA",
    "SPGI",
    "NEE",
    "RTX",
    "UNP",
    "T",
    "LOW",
    "UBER",
    "INTC",
    "HON",
    "COP",
    "VRTX",
    "BLK",
    "TJX",
    "SYK",
    "PGR",
    "BKNG",
    "LMT",
    "C",
    "ELV",
    "MU",
    "ETN",
    "SCHW",
    "LRCX",
    "REGN",
    "BA",
    "PLD",
    "ADI",
    "UPS",
    "BSX",
    "CB",
    "NKE",
    "MMC",
    "DE",
    "KLAC",
    "PANW",
    "KKR",
    "ADP",
    "BMY",
    "MDT",
    "ANET",
    "AMT",
    "CI",
    "GILD",
    "FI",
    "HCA",
    "ABNB",
    "SO",
    "MDLZ",
    "SHW",
    "MO",
    "ICE",
    "SBUX",
    "SNPS",
    "DUK",
    "ZTS",
    "MCO",
    "CL",
    "GD",
    "WM",
    "MCK",
    "CTAS",
    "APH",
    "CVS",
    "TT",
    "ITW",
    "FDX",
    "EQIX",
    "EOG",
    "CME",
    "PNC",
    "PH",
    "NOC",
    "USB",
    "CDNS",
    "MMM",
    "AON",
    "ECL",
    "SLB",
    "TDG",
    "TGT",
    "BDX",
    "CMG",
    "MAR",
    "CSX",
    "EMR",
    "MSI",
    "WELL",
    "ORLY",
    "FCX",
    "NXPI",
    "CRWD",
    "AJG",
    "PYPL",
    "MPC",
    "PSX",
    "CARR",
    "RSG",
    "TFC",
    "ROP",
    "APD",
    "DHI",
    "COF",
    "NSC",
    "CEG",
    "MET",
    "HLT",
    "NEM",
    "AFL",
    "OXY",
    "MNST",
    "CHTR",
    "PSA",
    "AZO",
    "VLO",
    "PCAR",
    "ADSK",
    "WMB",
    "AIG",
    "AEP",
    "O",
    "URI",
    "SRE",
    "SPG",
    "GM",
    "CPRT",
    "BK",
    "TRV",
    "LEN",
    "TEL",
    "OKE",
    "KMB",
    "GWW",
    "KMI",
    "GEV",
    "HUM",
    "DLR",
    "ROST",
    "MRNA",
    "CCI",
    "MCHP",
    "JCI",
]

# Define the start and end dates for the historical data
start_date = "1980-01-01"
end_date = datetime.now().strftime("%Y-%m-%d")

# Define the path to the folder where data will be saved
desktop_path = os.path.join(os.path.expanduser("~"), "Desktop/thesis")
data_folder = os.path.join(desktop_path, "stock_data")

# Create the folder if it doesn't exist
os.makedirs(data_folder, exist_ok=True)


# Function to download and save stock data
def download_stock_data(symbol):
    try:
        # Download historical data
        stock_data = yf.download(symbol, start=start_date, end=end_date)

        # Convert the data to JSON format
        stock_data_json = stock_data.to_json(orient="index")

        # Define the file path
        file_path = os.path.join(data_folder, f"{symbol}.json")

        # Save the data to a JSON file
        with open(file_path, "w") as file:
            file.write(stock_data_json)

        print(f"Data for {symbol} saved successfully.")
    except Exception as e:
        print(f"Failed to download data for {symbol}: {e}")


# Download data for each symbol in the list
# for symbol in snp_500_symbols:
#     download_stock_data(symbol)
